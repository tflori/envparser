#!/usr/bin/env php
<?php

use EnvParser\EnvFile;
use EnvParser\ParseError;

require 'vendor/autoload.php';

try {
    $file = getFile();
    if (!is_readable($file)) {
      throw new InvalidArgumentException('Unable to read file ' . $file);
    }

    $envFile = new EnvFile();
    $envFile->read($file);

    if (hasFlag('-o') || hasFlag('--out')) {
        foreach ($envFile as $var => $value) {
          echo $var . ':';
          var_dump($value);
        }
    }

    if (hasFlag('-j') || hasFlag('--json')) {
        echo json_encode($envFile->getArrayCopy(), JSON_PRETTY_PRINT) . PHP_EOL;
    }

    if (hasFlag('-p') || hasFlag('--php')) {
      var_export($envFile->getArrayCopy());
    }
} catch (ParseError $error) {
    file_put_contents('php://stderr', $error->getMessage() . PHP_EOL);
    $line = $error->getBufferLine();
    if (strlen($line) > 0 && !hasFlag('-q') && !hasFlag('--quiet')) {
        echo $line . PHP_EOL;
        if (strlen($line) > $error->getColumn()) {
            preg_match(
                '/\G(.*?)([' . EnvFile::WHITESPACE_CHARACTERS . ']|$)/',
                $error->getBuffer(),
                $match,
                0,
                $error->getOffset()
            );
            echo str_repeat('_', $error->getColumn()) . '^' . str_repeat('_', strlen($match[1]) - 1) . PHP_EOL;
        }
    }
}

function hasFlag(string $argument)
{
    foreach ($_SERVER['argv'] as $arg) {
      if ($arg === $argument) {
        return true;
      }
    }

    return false;
}

function getFile()
{
    foreach ($_SERVER['argv'] as $i => $arg) {
      if ($i > 0 && $arg[0] !== '-' && file_exists($arg)) {
          return $arg;
      }
    }

    return __DIR__ . '/.env.example';
}
